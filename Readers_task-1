#include <unordered_map>
#include <deque>
#include <iostream>
#include <string>
#include <algorithm>
#include <iterator>
using namespace std;

int main()
{
    unordered_map<int,int> reader; // словарь чтец: количество прочитанных им страниц
    deque<int> read_pages; // дек достижений чтецов (количество прочитанных страниц каждым в порядке возрастания)
    int req_count;
    // считываем количество запосов
    cin >> req_count ;
    cin.get();
    // поочерёдно считываем все запросы
    for (int i = 0; i < req_count; ++i) {
        int reader_id = 0; // id чтеца
        int page_count = 0; // количество прочитанных им страниц
        string str;
        // считываем запрос
        getline(cin,str);
        string_view str_sv = str;
        // если CHEER получаем reader_id с 7 позиции
        if (str.at(0) == 'C'){
           str_sv.remove_prefix(6);
           reader_id = stoi(str_sv.data());
        }
        else{ // если READ
           // удаляем READ ищем пробел получаем reader_id
           str_sv.remove_prefix(5);
           int pos = str_sv.find(' ');
           reader_id = stoi(string(str_sv.substr(0, pos)));
           // удаляем reader_id получаем page_count
           str_sv.remove_prefix(pos + 1);
           page_count = stoi(str_sv.data());
        }

        if (str.at(0) == 'R'){
            // если читателя не было добавляем его и кол-во страниц в словарь
            auto it = reader.find(reader_id);
            if (it == reader.end()) {
                reader[reader_id] = page_count;
                // добавляем в порядке возрастания новое количество страниц в очередь достижений чтецов
                read_pages.insert(lower_bound(read_pages.begin(), read_pages.end(),page_count),page_count);
            } else {
                // если читатель был, смотрим сколько страниц он прочитал ранее
                int old_pages_count = it->second;
                it->second = page_count;
                // ищем и удаляем старое количество страниц в очереди достижений чтецов
                //auto it = lower_bound(read_pages.begin(), read_pages.end(),old_pages_count);
                read_pages.erase(lower_bound(read_pages.begin(), read_pages.end(),old_pages_count));
                // добавляем в порядке возрастания новое количество страниц в очередь достижений чтецов
                read_pages.insert(lower_bound(read_pages.begin(), read_pages.end(),page_count),page_count);
            }
        }

        if (str.at(0) == 'C'){
            auto it = reader.find(reader_id);
            // если читателя не было - выводим 0
            if (it == reader.end())
                cout << "0\n";
            else {
                // если читатель единственный - выводим 1
                if (reader.size() == 1){
                    cout << "1\n";
                } else {
                page_count = it->second;
                auto it = lower_bound(read_pages.begin(), read_pages.end(),page_count);
                // если он самый худший чтец
                if (it == read_pages.begin()){
                    cout << "0\n";
                } else {
                    // если всё же придётся коэффициент считать
                    //cout << "dist = " << lower_bound(read_pages.begin(), read_pages.end(),page_count) - read_pages.begin() << ", size - " << read_pages.size() << '\n';
                    cout << (it - read_pages.begin())* 1.0 / (read_pages.size()-1)  << '\n';
                }
                }
            }
        }
    }
    return 0;
}
//cin для проверки
//12
//CHEER 5
//READ 1 10
//CHEER 1
//READ 2 5
//READ 3 7
//CHEER 2
//CHEER 3
//READ 3 10
//CHEER 3
//READ 3 11
//CHEER 3
//CHEER 1
